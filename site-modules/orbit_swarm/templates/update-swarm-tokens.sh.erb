#!/bin/bash
# Script to update Docker Swarm tokens in external variables via NFS
# Generated by Puppet - do not edit manually

set -euo pipefail

VARIABLES_HOST="<%= lookup('variables_host') %>"
VARIABLES_NFS_PATH="/mnt/nas/homelab/variables"
VARIABLES_FILE="orbit-puppet.yaml"
VARIABLES_NAS_PATH="/var/nfs/shared/homelab/variables"
TEMP_FILE="/tmp/orbit-puppet-update.yaml"

log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" >&2
}

# Check if we're the swarm manager
if ! docker info --format '{{.Swarm.LocalNodeState}}' | grep -q "active"; then
    log "Not an active swarm node, skipping token update"
    exit 0
fi

if ! docker info --format '{{.Swarm.ControlAvailable}}' | grep -q "true"; then
    log "Not a swarm manager, skipping token update"
    exit 0
fi

log "Fetching current Docker Swarm tokens..."

# Get current tokens
MANAGER_TOKEN=$(docker swarm join-token manager -q)
WORKER_TOKEN=$(docker swarm join-token worker -q)

if [[ -z "$MANAGER_TOKEN" || -z "$WORKER_TOKEN" ]]; then
    log "ERROR: Failed to retrieve swarm tokens"
    exit 1
fi

log "Mounting NFS and fetching current external variables file..."

# Create NFS mount point
mkdir -p "$VARIABLES_NFS_PATH"

# Mount NFS share
if ! mount -t nfs "${VARIABLES_HOST}:${VARIABLES_NAS_PATH}" "$VARIABLES_NFS_PATH" 2>/dev/null; then
    log "ERROR: Failed to mount NFS share"
    exit 1
fi

# Copy current variables file
if ! cp "${VARIABLES_NFS_PATH}/${VARIABLES_FILE}" "$TEMP_FILE" 2>/dev/null; then
    log "WARNING: Could not fetch existing variables file, creating new one"
    cat > "$TEMP_FILE" <<EOF
# Docker Swarm tokens (auto-updated)
docker_swarm:
  manager_token: "$MANAGER_TOKEN"
  worker_token: "$WORKER_TOKEN"

# Discord webhook for notifications
discord:
  webhook_url: "REPLACE_WITH_YOUR_WEBHOOK_URL"
EOF
else
    log "Updating existing variables file with new tokens..."

    # Update tokens in existing file using Python or Ruby
    if command -v python3 >/dev/null 2>&1; then
        python3 -c "
import yaml
import sys

try:
    with open('$TEMP_FILE', 'r') as f:
        data = yaml.safe_load(f) or {}

    if 'docker_swarm' not in data:
        data['docker_swarm'] = {}

    data['docker_swarm']['manager_token'] = '$MANAGER_TOKEN'
    data['docker_swarm']['worker_token'] = '$WORKER_TOKEN'

    with open('$TEMP_FILE', 'w') as f:
        yaml.dump(data, f, default_flow_style=False)

    print('Tokens updated successfully')
except Exception as e:
    print(f'Error updating tokens: {e}', file=sys.stderr)
    sys.exit(1)
"
    elif command -v ruby >/dev/null 2>&1; then
        ruby -ryaml -e "
begin
  data = YAML.load_file('$TEMP_FILE') || {}
  data['docker_swarm'] ||= {}
  data['docker_swarm']['manager_token'] = '$MANAGER_TOKEN'
  data['docker_swarm']['worker_token'] = '$WORKER_TOKEN'

  File.write('$TEMP_FILE', YAML.dump(data))
  puts 'Tokens updated successfully'
rescue => e
  STDERR.puts \"Error updating tokens: #{e}\"
  exit 1
end
"
    else
        log "ERROR: Neither Python3 nor Ruby available for YAML processing"
        exit 1
    fi
fi

log "Updating variables file on NFS..."

# Copy updated file back to NFS
if cp "$TEMP_FILE" "${VARIABLES_NFS_PATH}/${VARIABLES_FILE}"; then
    log "Successfully updated external variables with new swarm tokens"
    rm -f "$TEMP_FILE"

    # Unmount NFS share
    umount "$VARIABLES_NFS_PATH" 2>/dev/null || true
else
    log "ERROR: Failed to update variables file on NFS"
    rm -f "$TEMP_FILE"
    umount "$VARIABLES_NFS_PATH" 2>/dev/null || true
    exit 1
fi
